#BlueJ class context
comment0.target=ComputationModel
comment0.text=\r\n\ The\ computational\ engine\ that\ will\ hold\ all\ the\ important\ \r\n\ functions\ for\ use\ in\ statistics\ and\ in\ the\ map\ panel.\r\n\r\n\ @author\ Fu,\ Michael,\ Naharul\ and\ Noyan\r\n\ @version\ 17/03/2018\r\n
comment1.params=
comment1.target=ComputationModel()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Computation\r\n
comment10.params=id\ neighbourhood
comment10.target=void\ printAirbnbDetails(java.lang.String,\ java.lang.String)
comment10.text=\r\n\ Prints\ all\ data\ in\ the\ airbnblistings\ according\ to\ id\ and\ neighbourhood\r\n
comment11.params=criteria\ neighbourhood
comment11.target=java.util.ArrayList\ getAirbnbSearchCriteria(java.lang.String,\ java.lang.String)
comment11.text=\r\n\ \ \r\n
comment12.params=
comment12.target=void\ setAirbnbDiscountedPrices()
comment12.text=\r\n\ Applies\ discounts\ to\ all\ applicable\ properties\r\n
comment13.params=id\ neighbourhood
comment13.target=int\ getDiscount(java.lang.String,\ java.lang.String)
comment13.text=\r\n\ Gets\ the\ discount\ for\ a\ specific\ neighbourhood\ id\r\n
comment14.params=
comment14.target=java.util.ArrayList\ getDiscountedProperties()
comment14.text=\r\n\ Returns\ a\ list\ of\ all\ discounted\ airbnb\ instances\r\n
comment15.params=criteria
comment15.target=java.util.ArrayList\ getDiscountedPropertiesSearch(java.lang.String)
comment15.text=\r\n\ Returns\ a\ list\ of\ all\ discounted\ airbnb\ listings\ instances\ witha\ given\ criteria\r\n
comment16.params=criteria\ neighbourhood
comment16.target=java.lang.String\ getCheapestDiscountedAirbnbSearch(java.lang.String,\ java.lang.String)
comment16.text=\r\n\ Returns\ a\ string\ containing\ the\ cheapest\ airbnb\ discounted\ property\ matching\ the\ criteria\r\n
comment17.params=
comment17.target=java.lang.String\ getMostTrustedAirbnb()
comment17.text=\r\n\ Retruns\ the\ most\ trusted\ airbnb\ instance\ from\ the\ entire\ csv\ file\r\n
comment18.params=criteria
comment18.target=java.lang.String\ getCheapestDiscountedAirbnbSearchAll(java.lang.String)
comment18.text=\r\n\ Returns\ a\ string\ containing\ the\ cheapest\ airbnb\ discounted\ property\ matching\ the\ criteria\r\n
comment19.params=criteria\ neighbourhood
comment19.target=java.lang.String\ getCheapestAirbnbSearch(java.lang.String,\ java.lang.String)
comment19.text=\r\n\ Runs\ a\ search\ for\ the\ cheapest\ airbnb\ property\ under\ the\ given\ criteria\r\n
comment2.params=from\ to
comment2.target=long\ getNumberOfAvailableProperties(int,\ int)
comment2.text=\r\n\ Calculates\ the\ number\ of\ available\ properties\ within\ the\ price\ range.\r\n\ @param\ from\ is\ a\ int\ value,\ holding\ the\ lower\ boundary\ price.\r\n\ @param\ to\ is\ a\ int\ value,\ holding\ the\ upper\ boundary\ price.\r\n\ \r\n\ @return\ the\ number\ of\ available\ properties\ within\ the\ price\ range.\r\n
comment20.params=id\ neighbourhood
comment20.target=java.lang.String[]\ getAirbnbDetails(java.lang.String,\ java.lang.String)
comment20.text=\r\n\ Returns\ an\ array\ containing\ all\ the\ airbnb\ listing\ instances\ in\ a\ given\ id\r\n\ and\ neighbourhood\r\n
comment21.params=neighbourhood\ from\ to
comment21.target=double\ averageNeighbourHoodPrice(java.lang.String,\ int,\ int)
comment21.text=\r\n\ Calculates\ the\ average\ price\ per\ night\ for\ a\ specified\ neighbourhood.\r\n\ \r\n\ @param\ neighbourhood\ -\ is\ a\ String,\ the\ name\ for\ the\ \r\n\ neighbourhood\ to\ find\ the\ average\ price\ per\ night.\r\n\ @param\ from\ is\ a\ int\ value,\ holding\ the\ lower\ boundary\ price.\r\n\ @param\ to\ is\ a\ int\ value,\ holding\ the\ upper\ boundary\ price.\r\n\ \r\n\ @return\ the\ average\ price\ per\ night\ for\ a\ neighbourhood\ if\ valid,\ \r\n\ else\ if\ no\ listings\ exists,\ will\ return\ a\ rogue\ value\ of\ -1.\r\n
comment22.params=from\ to
comment22.target=double\ getMedianPrice(int,\ int)
comment22.text=\r\n\ Returns\ the\ median\ price\ for\ airbnb\ property\ in\ the\ given\ range\r\n
comment23.params=
comment23.target=java.util.HashSet\ getNeighbourhoods()
comment23.text=\r\n\ Returns\ a\ hashset\ all\ the\ neighbourhoods\r\n
comment24.params=
comment24.target=void\ printNeighbourHoods()
comment24.text=\r\n\ Prints\ all\ neighbourhoods\ in\ the\ csv\ file\r\n
comment25.params=from\ to
comment25.target=java.lang.String\ getPriciestNeighbourHood(int,\ int)
comment25.text=\r\n\ Calculates\ the\ most\ expensive\ neighbourhood\ to\ stay\ in\ for\ the\ specified\ price\ range.\r\n\ @param\ from\ is\ a\ int\ value,\ holding\ the\ lower\ boundary\ price.\r\n\ @param\ to\ is\ a\ int\ value,\ holding\ the\ upper\ boundary\ price.\r\n\ \r\n\ @return\ the\ most\ expensive\ neighbourhood\ to\ stay\ in\ for\ the\ specified\ price\ range.\r\n
comment26.params=from\ to
comment26.target=int\ atleastOneReviewIn2017(int,\ int)
comment26.text=\r\n\ Returns\ the\ number\ of\ properties\ that\ have\ at\ least\ one\ review\ in\ 2017\r\n\ \r\n\ @param\ from\ is\ a\ int\ value,\ holding\ the\ lower\ boundary\ price.\r\n\ @param\ to\ is\ a\ int\ value,\ holding\ the\ upper\ boundary\ price.\r\n\ \r\n\ @return\ the\ number\ of\ properties\ that\ have\ at\ least\ one\ review\ in\ 2017\r\n
comment27.params=nei
comment27.target=java.lang.Object[][]\ extractData(java.lang.String)
comment27.text=\r\n\ Extract\ all\ propertise\ withn\ a\ certain\ price\ range\ into\ a\ 2D\ array\ that\ is\ used\ for\ populating\r\n\ data\ for\ the\ table\ which\ shown\ when\ a\ icon\ is\ clicked\ \r\n\ \r\n\ @param\ name\ of\ the\ neighbourhood\r\n
comment28.params=
comment28.target=void\ setSizeForEachNeighbourHood()
comment28.text=\r\n\ Set\ all\ location\ icon\ with\ a\ size\r\n\ \r\n
comment29.params=
comment29.target=java.util.HashMap\ getSizeForEachNeighbourHood()
comment29.text=\r\n\ \r\n\ get\ the\ dictionary\ which\ store\ all\ sizes\ information\r\n
comment3.params=from\ to
comment3.target=long\ getNumberOfNonPrivate(int,\ int)
comment3.text=\r\n\ Calculates\ the\ number\ of\ non\ private\ property\ in\ the\ given\ range\r\n\ @Param\ the\ range\ over\ which\ to\ carry\ out\ this\ operation\r\n\ @Return\ the\ number\ of\ the\ non\ private\ property\ over\ the\ range\ \r\n
comment30.params=from\ to
comment30.target=java.util.ArrayList\ getAvailableProperties(int,\ int)
comment30.text=\r\n\ Return\ all\ available\ properties\ in\ a\ certain\ range\ of\ price\ defined\ by\ end\ users\r\n\ \r\n\ @param\ upper\ limit\ of\ the\ range\r\n\ @param\ lower\ limit\ of\ the\ range\r\n\ @return\ all\ properties\ within\ this\ range\ as\ List\r\n
comment31.params=neighbourhood
comment31.target=java.util.ArrayList\ getCurrentNeighbourhoodListings(java.lang.String)
comment31.text=\r\n\ Return\ the\ list\ of\ properties\ of\ a\ certain\ neighbourhood\ when\ a\ range\ is\ decided\ by\ end\ users\r\n\ \r\n\ @param\ the\ name\ of\ the\ neighbourhood\r\n\ @return\ A\ list\ contains\ all\ available\ properties\ in\ that\ neighbourhood\r\n\ \r\n
comment32.params=neighbourhood
comment32.target=int\ getCurrentNeighbourSize(java.lang.String)
comment32.text=\r\n\ Return\ the\ size\ of\ list\ of\ properties\ of\ a\ certain\ neighbourhood\ when\ a\ range\ is\ decided\ by\ end\ users\r\n\ \r\n\ @param\ the\ name\ of\ the\ neighbourhood\ and\ the\ money\ range\r\n\ @return\ the\ size\ of\ a\ list\ contains\ all\ available\ properties\ in\ that\ neighbourhood\r\n\ \r\n
comment33.params=from\ to
comment33.target=void\ setCurrentRange(int,\ int)
comment33.text=\r\n\ Set\ the\ current\ selected\ range\ for\ search,\ Do\ remember\ to\ run\ this\ method\ when\ new\ range\ is\ selected\r\n\ \r\n\ @param\ upper\ limit\ for\ the\ range\r\n\ @param\ lower\ limit\ for\ the\ range\r\n
comment34.params=
comment34.target=void\ setCurrentAvaiableProperties()
comment34.text=\r\n\ Set\ the\ available\ properties\ under\ the\ selected\ range\r\n
comment35.params=
comment35.target=int\ CalLongestStay()
comment35.text=\r\n\ Count\ the\ properties\ that\ accepting\ long\ term\ stay(longer\ than\ 6\ months)\r\n\ @return\ number\ of\ the\ properties\r\n
comment36.params=from\ to
comment36.target=int\ CalLongestStay(int,\ int)
comment36.text=\r\n\ Count\ the\ properties\ that\ accepting\ long\ term\ stay(longer\ than\ 6\ months)\r\n\ @param\ upper\ limit\ for\ the\ range\r\n\ @param\ lower\ limit\ for\ the\ range\r\n
comment37.params=id
comment37.target=AirbnbListing\ getListingByID(java.lang.String)
comment37.text=\r\n\ Returns\ a\ specific\ airbnb\ listing\ by\ its\ id\r\n
comment4.params=neighbourhood
comment4.target=java.util.ArrayList\ getNeighbourhoodListings(java.lang.String)
comment4.text=\r\n\ Gets\ the\ neighbourhood\ listing\ for\ one\ specific\ neighbourhood\r\n\ @Param\ the\ neightbourhood\ name\r\n\ @Return\ an\ arraylist\ containing\ the\ all\ listing\ instances\ in\ that\ neighbourhood\r\n
comment5.params=neighbourhood\ from\ to
comment5.target=long\ getNeighbourhoodListingsPriceRangeSize(java.lang.String,\ int,\ int)
comment5.text=\r\n\ Calculates\ the\ price\ range\ for\ the\ neighbourhood\ listing\r\n\ @Param\ the\ name\ of\ the\ neighbourhood,\ the\ price\ boundaries\r\n\ @Return\ the\ range\ of\ prices\ for\ the\ neighbourhood\ in\ the\ given\ price\ range\r\n
comment6.params=neighbourhood\ from\ to
comment6.target=java.util.ArrayList\ getNeighbourhoodListingsPriceRange(java.lang.String,\ int,\ int)
comment6.text=\r\n\ Calculates\ the\ price\ range\ for\ the\ neighbourhood\ listing\ and\ then\ creates\ an\ arraylist\ accordingly\r\n\ @Param\ the\ name\ of\ the\ neighbourhood,\ the\ price\ boundaries\r\n\ @Return\ an\ arraylist\ for\ the\ range\ of\ prices\ in\ the\ given\ neighbourhood\r\n
comment7.params=neighbourhood
comment7.target=int\ getNeighbourSize(java.lang.String)
comment7.text=\r\n\ Returns\ the\ size\ of\ a\ given\ neighbourhood\ by\ calculating\ the\ length\ of\ the\ listings\ arraylist\r\n
comment8.params=
comment8.target=int\ getAverageReviewScorePerProperties()
comment9.params=
comment9.target=java.lang.Object[][]\ getData()
numComments=38
